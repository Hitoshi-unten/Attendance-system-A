<% provide(:title, @user.name) %>
<!--ビューの役割は、この情報をユーザーが読める形式で表示すること。ここで気を付けたい重要な違いは、表示する情報を集めるのは コントローラであって、ビューではないということ。ビューは、コントローラが作成した情報に対して余計なことをせずに表示する必要がある。-->
<div>
  <table class="table table-bordered user-table">
    <tr>
      <td>
        <%= l(@first_day, format: :middle) %>   時間管理表
      </td>
      <td>
          指定勤務開始時間：<%= format_basic_info(@user.designated_work_start_time) %><br>
          指定勤務終了時間：<%= format_basic_info(@user.designated_work_end_time) %><br>
      </td>
      <td colspan="2">基本勤務時間：<%= format_basic_info(@user.basic_work_time) %></td>
      <td>初日：<%= l(@first_day, format: :short) %></td>
      <!--lは小文字のエル（L)です。2つ目の引数にformat::〜と記述することで、指定のフォーマットを指定できる。引数を指定しなかった場合はformat::defaultとして処理される。-->
    </tr>
    
    <tr>
      <td>所属：<%= @user.affiliation.present? ? @user.affiliation : "未所属" %></td>
      <td>氏名：<%= @user.name %></td>
      <!--このビューでは、埋め込みRuby（ERB）を使用してユーザーの名前とメールアドレスを表示する。--><!--@で始まる@userというオブジェクトはインスタンス変数という変数のうちのひとつ。--><!--この@userをドット記法で繋げることにより、インスタンス変数に代入しているユーザーオブジェクトのnameの値を取得し表示することができる仕組み。-->
      <td>コード</td>
      <td>出勤日数：<%= @worked_sum %></td>
      <td>締め：<%= l(@last_day, format: :short) %></td>
    </tr>
  </table>  
</div>

<div>
  <table class="table table-bordered table-condensed table-hover" id="table-attendances">
    <thead>
 　　<!--rowspan:縦結合、colspan：横結合-->
      <tr>
        <th rowspan="2"></th>
        <th rowspan="3">日付</th>
        <th rowspan="3">曜日</th>
        <th colspan="8">【実績】</th>
        <th colspan="5">所定外勤務</th>
      </tr>
      <tr>
        <th colspan="3">出社</th>
        <th colspan="3">退社</th>
        <th rowspan="2">在社時間</th>
        <th rowspan="2">備考</th>
        <th colspan="2">終了予定時間</th>
        <th rowspan="2">時間外時間</th>
        <th rowspan="2">業務処理内容</th>
        <th rowspan="2">指示者確認㊞</th>
      </tr>
      <tr>
        <th>残業申請</th>
        <th>時</th>
        <th>分</th>
        <th></th>
        <th>時</th>
        <th>分</th>
        <th></th>
        <th>時</th>
        <th>分</th>
      </tr>
    </thead>
    
    <tbody>
      <!--月の初日からを繰り返し処理して行を出力していることで月の日付が一覧表示されている。--><!--日付のみでひと月分を表示してみる。月の初日と月の末日の日付データをそれぞれインスタンス変数で定義する。これらを範囲オブジェクトとして扱うことで、手軽にひと月分の情報を表示することが可能となる。--><!--範囲オブジェクトとして扱う(@first_day..@last_day)-->
      <% @attendances.each do |day| %>
        <tr>
          <!--文法< %= link_to[リンクの名前],[URLまたはルーティングヘルパー] %>-->
          <td></td>
          <td><%= l(day.worked_on, format: :short) %></td> <!--２つめの引数にformat: :〜と記述することで、指定のフォーマットを指定できる。-->
          <td><%= $days_of_the_week[day.worked_on.wday] %></td>
          <td><%= format_hour(day.started_at) if day.started_at.present? %></td> 
          <td><%= format_min(day.started_at)  if day.started_at.present? %></td>
          <td>
            <%# < % if btn_text = attendance_state(day) % >
              < %= link_to "#{btn_text}", user_attendance_path(@user, day), method: :patch, class: "btn btn-primary btn-attendance" % >
            < % end % > %>
            <!--この構文では、まずif文の条件式に記述されているattendance_stateが呼び出される。引数には繰り返し処理中のAttendanceオブジェクトを渡している。このメソッドから３パターンの戻り値が返ってくる。attendances_helper。その戻り値をbtn＿text変数に代入している。こうすることで、処理が実行された時、戻り値の値を使用できる仕組みになっている。-->
          </td>
          <td><%= format_hour(day.finished_at) if day.finished_at.present? %></td>
          <td><%= format_min(day.finished_at)  if day.finished_at.present? %></td>
          <td></td>
          <td>
            <% if day.started_at.present? && day.finished_at.present? %>
              <%= str_times = working_times(day.started_at.floor_to(15.minutes), day.finished_at.floor_to(15.minutes)) %>
            <!--これは繰り返し処理中の勤怠データに、started_atとfinished_atの値が存在するか判定するもの。--><!--在社時間を計算するためには上記どちらの値も必須なので、これらが存在することを確認してからヘルパーメソッドを呼び出すよう設定している。--><!--数値を扱うクラスには主に浮動小数点を扱うFloatクラスと整数を扱うIntegerクラスがあり、floorメソッドはFloatクラスのメソッドで、小数点以下を切って、より小さい方の整数に丸める。--><!--< %= working_times(day.started_at, day.finished_at) %>-->
              <% @total_working_times = @total_working_times.to_f + str_times.to_f %>
            <% end %>
          </td>
          <td><%= day.note %></td>
          <td><%= day.finish_overtime.strftime('%H') if day.finish_overtime.present? %></td>
          <td><%= day.finish_overtime.strftime('%M') if day.finish_overtime.present? %></td>
          <!--Time#strftimeは、Timeオブジェクトの表示形式を指定して文字列に変換する。TimeはRubyの組み込みオブジェクト。strftime(format) -> String 時刻をformat文字列に従って文字列に変換した結果を返す。%H:24時間制の時(00-23)、%M:分(00-59)-->
          <td></td>
          <td><%= day.work_content %></td>
          <td></td>
      <% end %>
    </tbody>

    <tfoot>
    </tfoot>
  </table>
</div>