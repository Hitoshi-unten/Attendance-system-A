<% provide(:title, @user.name) %>
<!--ビューの役割は、この情報をユーザーが読める形式で表示すること。ここで気を付けたい重要な違いは、表示する情報を集めるのは コントローラ であって、ビューではないということ。ビューは、コントローラが作成した情報に対して余計なことをせずに表示する必要がある。-->
<div>
  <table class="table table-bordered user-table">
    <tr>
      <td>
        <%= link_to "⇦︎︎︎", user_path(date: @first_day.prev_month), class: "btn btn-primary btn-left" %>
        <%= l(@first_day, format: :middle) %>   時間管理表
        <%= link_to "︎︎︎⇨", user_path(date: @first_day.next_month), class: "btn btn-primary btn-right" %>
      </td>
      <td>指定勤務時間：<%= format_basic_info(@user.work_time) %></td>
      <td>基本時間：<%= format_basic_info(@user.basic_time) %></td>
      <td></td>
      <td>初日：<%= l(@first_day, format: :short) %></td>
    </tr>
    
    <tr>
      <td>所属：<%= @user.department.present? ? @user.department : "未所属" %></td>
      <td>氏名：<%= @user.name %></td>
      <!--このビューでは、埋め込みRuby（ERB）を使用してユーザーの名前とメールアドレスを表示する。-->
      <!--@で始まる@userというオブジェクトはインスタンス変数という変数のうちのひとつ。-->

      <!--この@userをドット記法で繋げることにより、インスタンス変数に代入しているユーザーオブジェクトのnameの値を取得し表示することができる仕組み。-->
      <td>コード</td>
      <td>出勤日数：<%= @worked_sum %></td>
      <td>締め：<%= l(@last_day, format: :short) %></td>
    </tr>
  </table>  
</div>

<div class="btn-users-show">
  <%= link_to "勤怠を編集", attendances_edit_one_month_user_path(date: @first_day), class: "btn btn-success" %>
</div>

<div>
  <table class="table table-bordered table-condensed table-hover" id="table-attendances">
    <thead>
      <tr>
        <th rowspan="2">日付</th>
        <th rowspan="2">曜日</th>
        <th colspan="3">出勤</th>
        <th colspan="3">退勤</th>
        <th rowspan="2">在社時間</th>
        <th rowspan="2">備考</th>
      </tr>
      <tr>
        <th>時</th>
        <th>分</th>
        <th></th>
        <th>時</th>
        <th>分</th>
        <th></th>
      </tr>
    </thead>
    
    <tbody>
      <!--月の初日からを繰り返し処理して行を出力していることで月の日付が一覧表示されている。-->
      <% @attendances.each do |day| %>
        <tr>
          <!--２つめの引数にformat: :〜と記述することで、指定のフォーマットを指定できる。-->
          <td><%= l(day.worked_on, format: :short) %></td>
          <td>
            <!--wdayメソッドを使うことで、何番目（日曜から始まり0から数える）の曜日か確認できる。-->
            <% if day.worked_on.wday == 6 %>
               <font color="Blue"><%= $days_of_the_week[day.worked_on.wday] %></font>
            <% elsif day.worked_on.wday == 0 %>
               <font color="Red"><%= $days_of_the_week[day.worked_on.wday] %></font>
            <% else %>
               <%= $days_of_the_week[day.worked_on.wday] %>
            <% end %>
          <td><%= format_hour(day.started_at) if day.started_at.present? %></td> 
          <td><%= format_min(day.started_at)  if day.started_at.present? %></td>
          <td>
            <% if btn_text = attendance_state(day) %>
              <%= link_to "#{btn_text}", user_attendance_path(@user, day), method: :patch, class: "btn btn-primary btn-attendance" %>
            <% end %>
            <!--この構文では、まずif文の条件式に記述されているattendance_stateが呼び出される。引数には繰り返し処理中のAttendanceオブジェクトを渡している。このメソッドから３パターンの戻り値が返ってくる。attendances_helper。その戻り値をbtn＿text変数に代入している。こうすることで、処理が実行された時、戻り値の値を使用できる仕組みになっている。-->
          </td>
          <td><%= format_hour(day.finished_at) if day.finished_at.present? %></td>
          <td><%= format_min(day.finished_at)  if day.finished_at.present? %></td>
          <td></td>
          <td>
            <% if day.started_at.present? && day.finished_at.present? %>
            <!--これは繰り返し処理中の勤怠データに、started_atとfinished_atの値が存在するか判定するもの。-->
            <!--在社時間を計算するためには上記どちらの値も必須なので、これらが存在することを確認してからヘルパーメソッドを呼び出すよう設定している。-->
              <%= working_times(day.started_at, day.finished_at) %>
            <% end %>
          </td>
          <td><%= day.note %></td>
        </tr>
      <% end %>
    </tbody>
    
    <tfoot>
      <!--rowspan:縦結合、colspan：横結合-->
      <tr>
        <td colspan="2">累計日数</td>
        <td colspan="2">総合勤務時間</td>
        <td colspan="2">累計在社時間</td>
        <td rowspan="2"></td>
      </tr>
      <tr>
        <td colspan="2"><%= @attendances.count %></td>
        <td colspan="2"><%= format_basic_info(@user.work_time).to_f * @worked_sum %></td>
      　<!--式の右側の@worked_sumの値はそのまま計算できるが、左側に関してはformat_basic_infoでの戻り値がstringクラスになるためそのままだとうまく計算されない。文字列と数値はそのまま計算しても期待する結果は返ってこない。そのため、to_fメソッドを追加。このメソッドは、文字列を浮動小数点化とみなしてFloatオブジェクトに変換する。to_iメソッド（文字列から整数に変換）の小数点付きバージョン。これで正常に計算結果を出力できるようになる。-->
        <td colspan="2"><%= format("%.2f", @total_working_times.to_f) %></td>
      </tr>
    </tfoot>
  </table>
</div>