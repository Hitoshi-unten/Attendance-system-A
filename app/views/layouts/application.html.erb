<!DOCTYPE html>
<!--Railsでは、app/views/layouts/application.html.erbに共通となるHTML（erb含む）を記述することができる。-->
<html>
  <head>
    <title><%= full_title(yield(:title)) %></title>
    <%= csrf_meta_tags %>
    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
    <%= render 'layouts/shim' %>
    <!--上記のコードではrenderと呼ばれるRailsヘルパー呼び出しを使っている。-->
    <!--このコードはapp/views/layouts/_shim.html.erbというファイルを探して、その内容を評価して結果をビューに挿入する。-->
    <!--（< %= ... %>はERB内でRubyの式の結果を表示するための記法だと学習した）-->
    <!--ここで_shim.html.erbというファイル名に注目する。-->
    <!--先頭に_（アンダースコア、またはアンダーバー）がついていることが分かる。-->
    <!--このアンダースコアは、パーシャルで使用する命名規約であり、一目でそのファイルがパーシャルだと判断する目印にもなる。-->
  　<!--パーシャルが動作するためには、それに対応するファイルとコードを記述する必要がある。-->
  　<!--HTML shimの場合、コードは元々レイアウトファイル（application.html.erb）に記述していた３行でまずはパーシャルファイルを作成する。-->
  　<!--$ touch app/views/layouts/_shim.html.erb をターミナルで実行する。-->
  　<!--作成されたパーシャルファイルにコードを記述する。-->
  　<!--_shim.html.erbに３行を書き加える。-->
  　<!--同様にヘッダー用のパーシャルも作成し、コードを移動。-->
  　<!--$ touch app/views/layouts/_header.html.erb-->
  　<!--_header.html.erbにコードを書き加える。-->
  　<!--これでレイアウトファイル（application.html.erb)が分かりやすく、簡潔なコードになった。-->
  
  </head>
  <body>
    <!--この<body>タグ内に、各ファイルの<header>タグ部分のコードを追加している。-->
    <%= render 'layouts/header' %>
    <div class="container">
      <% flash.each do |message_type, msg| %>
        <div class="alert alert-<%= message_type %>"><%= msg.html_safe %></div>
      <% end %>
      <%= yield %> <!--ここに各ビューファイルの中身が代入される。
      このコードは各ページの内容部分をレイアウトに挿入されるためのもので、レイアウトを���う時に、static_pages/topにアクセスすると
      top.html.erbの内容がHTMLに変換され、上記の< %= yield %>の位置に挿入されるということを覚えておく。-->
      <!--< %= yield %>の部分にビューファイルの内容が代入された上でページが表示される仕組みになっている。-->
      <!--static_pages/topにアクセスするとtop.html.erbの内容がHTMLに変換され、上記の< %= yield %>の位置に挿入される-->
      <%= debug(params) if Rails.env.development? %>
      <!--本チュートリアルで開発したアプリケーションは本番環境での運用はしないが、どちらにせよ本番環境ではデバッグ情報は表示するべきではない。-->
      <!--そのため、次のように記述することで開発環境のみデバッグ情報を表示されるよう対策する。このコードでは、先に後半に記述されたRails.env.development?が実行される。-->
      <!--その結果が真（true）であればdebug(params)が表示される仕組み。-->

      <!--Railsにはデフォルトで3つの環境が存在する。-->

      <!--開発環境（development）-->
      <!--テスト環境（test）-->
      <!--本番環境（production）-->
      <!--こういった環境が存在することと、それぞれの名前は覚えておく。-->

      <!--ちなみにこのチュートリアルでサーバーを起動してブラウザで確認している画面は開発環境（development）のものになる。-->
    </div>
  </body>
</html>