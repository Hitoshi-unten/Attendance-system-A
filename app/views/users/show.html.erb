<% provide(:title, @user.name) %>
<!--ビューの役割は、この情報をユーザーが読める形式で表示すること。ここで気を付けたい重要な違いは、表示する情報を集めるのは コントローラであって、ビューではないということ。ビューは、コントローラが作成した情報に対して余計なことをせずに表示する必要がある。-->
<div>
  <table class="table table-bordered user-table">
    <tr>
      <td>
        <!--ページ内にボタンを配置し、前月分、次月分へ表示切り替えできる機能を追加する。-->
        <!--手法としては、link_toヘルパーメソッドにパラメーターを追加で渡し、パラメーターの有無によりページに表示する１ヶ月分の情報を判断する。-->
        <!--下記のように記述することで、paramsハッシュにdateキーを含めることができる。-->
        <!--idに関してはuser_pathによりRailsが自動的に判断して追加してくれる。-->
        <!--値には@first_day.prev_monthを指定している。prev_monthは対象のDateオブジェクトの１ヶ月前の状態を返す。つまり前月の日付情報をパラメーターで渡せるということでこれが次月の情報の場合はnext_monthを使用する-->
        <!--この拡張により、params[:date]から表示したい１ヶ月の情報を取り出せるようになった。-->
        <%= link_to "⇦︎︎︎", user_path(date: @first_day.prev_month), class: "btn btn-primary btn-left" %>
        <%= l(@first_day, format: :middle) %>   時間管理表
        <%= link_to "︎︎︎⇨", user_path(date: @first_day.next_month), class: "btn btn-primary btn-right" %>
      </td>
      <td>
          指定勤務開始時間：<%= format_basic_info(@user.designated_work_start_time) %><br>
          指定勤務終了時間：<%= format_basic_info(@user.designated_work_end_time) %><br>
      </td>
      <td colspan="2">基本勤務時間：<%= format_basic_info(@user.basic_work_time) %></td>
      <td>初日：<%= l(@first_day, format: :short) %></td>
      <!--lは小文字のエル（L)です。2つ目の引数にformat::〜と記述することで、指定のフォーマットを指定できる。引数を指定しなかった場合はformat::defaultとして処理される。-->
    </tr>
    
    <tr>
      <td>所属：<%= @user.affiliation.present? ? @user.affiliation : "未所属" %></td>
      <td>氏名：<%= @user.name %></td>
      <!--このビューでは、埋め込みRuby（ERB）を使用してユーザーの名前とメールアドレスを表示する。-->
      <!--@で始まる@userというオブジェクトはインスタンス変数という変数のうちのひとつ。-->

      <!--この@userをドット記法で繋げることにより、インスタンス変数に代入しているユーザーオブジェクトのnameの値を取得し表示することができる仕組み。-->
      <td>コード</td>
      <td>出勤日数：<%= @worked_sum %></td>
      <td>締め：<%= l(@last_day, format: :short) %></td>
    </tr>
  </table>  
</div>

<div class="btn-users-show">
  <%= link_to "勤怠を編集", attendances_edit_one_month_user_path(date: @first_day), class: "btn btn-success" %>
</div>

<div>
  <table class="table table-bordered table-condensed table-hover" id="table-attendances">
    <thead>
      <tr>
        <th rowspan="2"></th>
        <th rowspan="3">日付</th>
        <th rowspan="3">曜日</th>
        <th colspan="8">【実績】</th>
        <th colspan="5">所定外勤務</th>
      </tr>
      <tr>
        <th colspan="3">出社</th>
        <th colspan="3">退社</th>
        <th rowspan="2">在社時間</th>
        <th rowspan="2">備考</th>
        <th colspan="2">終了予定時間</th>
        <th rowspan="2">時間外時間</th>
        <th rowspan="2">業務処理内容</th>
        <th rowspan="2">指示者確認㊞</th>
      </tr>
      <tr>
        <th>残業申請</th>
        <th>時</th>
        <th>分</th>
        <th></th>
        <th>時</th>
        <th>分</th>
        <th></th>
        <th>時</th>
        <th>分</th>
      </tr>
    </thead>
    
    <tbody>
      <!--月の初日からを繰り返し処理して行を出力していることで月の日付が一覧表示されている。-->
      <!--日付のみでひと月分を表示してみる。月の初日と月の末日の日付データをそれぞれインスタンス変数で定義する。これらを範囲オブジェクトとして扱うことで、手軽にひと月分の情報を表示することが可能となる。-->
      <!--範囲オブジェクトとして扱う(@first_day..@last_day)-->
      <% @attendances.each do |day| %>
        <tr>
          <!--２つめの引数にformat: :〜と記述することで、指定のフォーマットを指定できる。-->
          <!--文法< %= link_to[リンクの名前],[URLまたはルーティングヘルパー] %>-->
          <td><%= link_to "残業申請", edit_overwork_request_user_path(@user, params: { day: day.worked_on }), remote: true, class: "btn btn-primary" %></td>
          <td><%= l(day.worked_on, format: :short) %></td>
          <td>
            <!--wdayメソッドを使うことで、何番目（日曜から始まり0から数える）の曜日か確認できる。-->
            <!--日0月1火2水3木4金5土6-->
            <!--グローバル変数は極端に言うとプログラムのどこからでも呼び出すことができる変数で$変数名のように$を用いて表現する。-->
            <% if day.worked_on.wday == 6 %>
               <font color="Blue"><%= $days_of_the_week[day.worked_on.wday] %></font>
            <% elsif day.worked_on.wday == 0 %>
               <font color="Red"><%= $days_of_the_week[day.worked_on.wday] %></font>
            <% else %>
               <%= $days_of_the_week[day.worked_on.wday] %>
            <% end %>
            <!--後置きのifによって、started_atの値が存在する場合のみ表示できるよう制御している。-->
          </td>
          <td><%= format_hour(day.started_at) if day.started_at.present? %></td> 
          <td><%= format_min(day.started_at)  if day.started_at.present? %></td>
          <td>
            <% if btn_text = attendance_state(day) %>
              <%= link_to "#{btn_text}", user_attendance_path(@user, day), method: :patch, class: "btn btn-primary btn-attendance" %>
            <% end %>
            <!--この構文では、まずif文の条件式に記述されているattendance_stateが呼び出される。引数には繰り返し処理中のAttendanceオブジェクトを渡している。このメソッドから３パターンの戻り値が返ってくる。attendances_helper。その戻り値をbtn＿text変数に代入している。こうすることで、処理が実行された時、戻り値の値を使用できる仕組みになっている。-->
          </td>
          <td><%= format_hour(day.finished_at) if day.finished_at.present? %></td>
          <td><%= format_min(day.finished_at)  if day.finished_at.present? %></td>
          <td></td>
          <td>
            <% if day.started_at.present? && day.finished_at.present? %>
            <!--これは繰り返し処理中の勤怠データに、started_atとfinished_atの値が存在するか判定するもの。-->
            <!--在社時間を計算するためには上記どちらの値も必須なので、これらが存在することを確認してからヘルパーメソッドを呼び出すよう設定している。-->
              <%= working_times(day.started_at, day.finished_at) %>
            <% end %>
          </td>
          <td><%= day.note %></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
          <td></td>
        </tr>
      <% end %>
    </tbody>

    <tfoot>
      <!--勤怠表にフッター部分を追加する。フッターとは、Webページなどにおいて各ページの下部に定形の情報を表示するための領域のこと。勤怠表の一番下に追加情報表示領域を作ろうというもの。-->
      <!--表示領域には、・１ヶ月分の合計日数、・出勤した日付だけのwork_time（勤務時間）累計、・在社時間の累計 以上を表記する。-->
      <!--rowspan:縦結合、colspan：横結合-->
      <tr>
        <td rowspan="3"></td>
        <td colspan="2"></td>
        <td colspan="6"></td>
        <td></td>
        <td colspan="5"></td>
        <td></td>
      </tr>
      <!--<tr>-->
      <!--  <td rowspan="3">< %= @attendances.count %></td>-->
      <!--  <td rowspan="3">< %= format_basic_info(@user.basic_work_time).to_f * @worked_sum %></td>-->
        <!--今回の総合勤務時間は[work_time]*[出勤日数]の結果を意味する。つまり、ユーザーの出勤日数から想定した勤務時間の累計になる。-->
        <!--勤怠基本情報は、showアクション内ですでに@user変数として代入されている。そして出勤日数も同様に、@worked_sum変数に代入されている。計算に必要な両方の価が取得可能な状態なので、あとは計算するだけとなる。-->
      　<!--式の右側の@worked_sumの値はそのまま計算できるが、左側に関してはformat_basic_infoでの戻り値がstringクラスになるためそのままだとうまく計算されない。文字列と数値はそのまま計算しても期待する結果は返ってこない。
      <!--　そのため、to_fメソッドを追加。このメソッドは、文字列を浮動小数点数とみなしてFloatオブジェクトに変換する。to_iメソッド（文字列から整数に変換）の小数点付きバージョン。これで正常に計算結果を出力できるようになる。-->-->
      <!--  <td colspan="2">< %= format("%.2f", @total_working_times.to_f) %></td>-->
        <!--こちらは計算結果を小数点第二位までフォーマットしている。-->
      <!--</tr>-->
    </tfoot>
  </table>
</div>

<!--モーダルウインドウ表示-->
<div id="edit_overwork_request" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true"></div>
